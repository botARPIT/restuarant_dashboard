version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: restaurant-dashboard-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: restaurant_dashboard_prod
      POSTGRES_USER: restaurant_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your-secure-db-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U restaurant_user -d restaurant_dashboard_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: restaurant-dashboard-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your-redis-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: restaurant-dashboard-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: restaurant_dashboard_prod
      DB_USER: restaurant_user
      DB_PASSWORD: ${DB_PASSWORD:-your-secure-db-password}
      DB_MAX_CONNECTIONS: 50
      DB_MIN_CONNECTIONS: 5
      REDIS_URL: redis://:${REDIS_PASSWORD:-your-redis-password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-key-here}
      ZOMATO_API_KEY: ${ZOMATO_API_KEY}
      ZOMATO_API_SECRET: ${ZOMATO_API_SECRET}
      SWIGGY_API_KEY: ${SWIGGY_API_KEY}
      SWIGGY_API_SECRET: ${SWIGGY_API_SECRET}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/var/log/restaurant-dashboard
      - ./uploads:/var/uploads/restaurant-dashboard

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: restaurant-dashboard-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_BASE_URL: http://localhost:5000/api
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - restaurant-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: restaurant-dashboard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - restaurant-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: restaurant-dashboard-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - restaurant-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: restaurant-dashboard-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - restaurant-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  restaurant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16